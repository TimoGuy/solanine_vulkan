#######################
#    Base Movement    #
#######################


:StateIdle
  animation Idle
  loop      1
  trans     goto_run                          StateRun
  trans     goto_jump                         StateJumpFromIdle
  trans     goto_fall                         StateFall
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatGroundedPrepause
  trans     goto_fall_combat_prepause_ready   StateFallCombatAirbornePrepauseReady
  trans     goto_combat_execute_grounded      StateCombatGroundedAttack
  trans     goto_combat_execute_airborne      StateCombatAirborneAttack
  trans     goto_air_waza_1st_form            StateAttackAirWazaEnter1stForm
  trans     goto_air_waza_2nd_form            StateAttackAirWazaEnter2ndForm
  trans     goto_air_waza_3rd_form            StateAttackAirWazaEnter3rdForm
  trans     goto_air_waza_4th_form            StateAttackAirWazaEnter4thForm


:StateRun
  animation Running.inmotion.LittleUpperbody
  loop      1
  trans     goto_idle                         StateIdle
  trans     goto_jump                         StateJumpFromRun
  trans     goto_fall                         StateFall
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatGroundedPrepause
  trans     goto_fall_combat_prepause_ready   StateFallCombatAirbornePrepauseReady
  trans     goto_combat_execute_grounded      StateCombatGroundedAttack
  trans     goto_combat_execute_airborne      StateCombatAirborneAttack


# @NOTE This is a test #

# 1st Form: Gust Wall.

:StateAttackAirWaza1stFormEntrance
  animation Air_Waza_1_Enter
  loop 0
  on_finish StateAttackAirWaza1stFormPart1
  # @TODO: it looks like there should be an exit from the entrance itself too. Logically and animation-wise (e.g. what if there's an attack that if you enter the form, you can't get out unless if you take damage).

:StateAttackAirWaza1stFormPart1
  animation Air_Waza_1_1
  loop 0
  on_finish StateAttackAirWaza1stFormPart1Exit

:StateAttackAirWaza1stFormPart1Exit
  animation Air_Waza_1_1_Exit
  loop 0
  on_finish StateIdle

# 2nd Form: Updraft.

:StateAttackAirWaza1stFormTo2ndForm
  animation Air_Waza_1_to_2
  loop 0

:StateAttackAirWaza2ndFormEntrance
  animation Air_Waza_2_Enter
  loop 0

:StateAttackAirWaza2ndFormPart1
  animation Air_Waza_2_1
  loop 0

:StateAttackAirWaza2ndFormPart1Exit
  animation Air_Waza_2_1_Exit
  loop 0
  on_finish StateIdle

:StateAttackAirWaza2ndFormPart2
  animation Air_Waza_2_2
  loop 0

:StateAttackAirWaza2ndFormPart2Exit
  animation Air_Waza_2_2_Exit
  loop 0
  on_finish StateIdle

# 3rd Form: Takeoff.

:StateAttackAirWaza3rdFormEntrance
  animation Air_Waza_3_Enter
  loop 0

:StateAttackAirWaza3rdFormPart1
  animation Air_Waza_3_1
  loop 0

# 4th Form: Vacuum

:StateAttackAirWaza3rdFormTo4thForm
  animation Air_Waza_3_to_4
  loop 0

:StateAttackAirWaza4thFormEntrance
  animation Air_Waza_4_Enter
  loop 0

:StateAttackAirWaza4thFormPart1
  animation Air_Waza_4_1
  loop 0

:StateAttackAirWaza4thFormPart2
  animation Air_Waza_4_2
  loop 0

# 5th Form: Compression

:StateAttackAirWaza4thFormTo5thForm  # @NOTE: there is no normal entrance into the 5th form.
  animation Air_Waza_4_to_5
  loop 0

:StateAttackAirWaza5thFormPart1
  animation Air_Waza_5_1
  loop 0

:StateAttackAirWaza5thFormPart2
  animation Air_Waza_5_2
  loop 0

:StateAttackAirWaza5thFormPart3
  animation Air_Waza_5_3
  loop 0

# 6th Form: Path of Most Resistance

:StateAttackAirWaza5thFormTo6thForm  # @NOTE: there is no normal entrance into the 6th form.
  animation Air_Waza_5_to_6
  loop 0

:StateAttackAirWaza6thFormPart1
  animation Air_Waza_6_1
  loop 0

:StateAttackAirWaza6thFormPart2
  animation Air_Waza_6_2
  loop 0

:StateAttackAirWaza6thFormPart3
  animation Air_Waza_6_3
  loop 0

:StateAttackAirWaza6thFormPart4
  animation Air_Waza_6_4
  loop 0

:StateAttackAirWaza6thFormPart4Exit
  animation Air_Waza_6_4_Exit
  loop 0
  on_finish StateIdle

########################

:StateLandIdle
  animation Land_From_Jumping_From_Idle
  loop      0
  on_finish StateIdle
  trans     goto_run                          StateRun
  trans     goto_jump                         StateJumpFromIdle
  trans     goto_fall                         StateFall
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatGroundedPrepause
  trans     goto_fall_combat_prepause_ready   StateFallCombatAirbornePrepauseReady
  trans     goto_combat_execute_grounded      StateCombatGroundedAttack
  trans     goto_combat_execute_airborne      StateCombatAirborneAttack


:StateLandRun
  animation Land_From_Jumping_From_Run
  loop      0
  on_finish StateRun
  trans     goto_idle                         StateIdle
  trans     goto_jump                         StateJumpFromRun
  trans     goto_fall                         StateFall
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatGroundedPrepause
  trans     goto_fall_combat_prepause_ready   StateFallCombatAirbornePrepauseReady
  trans     goto_combat_execute_grounded      StateCombatGroundedAttack
  trans     goto_combat_execute_airborne      StateCombatAirborneAttack


:StateJumpFromIdle
  animation Jumping_From_Idle
  loop      0
  trans     goto_idle                         StateLandIdle
  trans     goto_run                          StateLandRun
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatAirbornePrepause


:StateJumpFromRun
  animation Jumping_From_Run
  loop      0
  trans     goto_idle                         StateLandIdle
  trans     goto_run                          StateLandRun
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatAirbornePrepause


:StateFall
  animation Falling
  loop      0
  trans     goto_idle                         StateLandIdle
  trans     goto_run                          StateLandRun
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_prepause              StateCombatAirbornePrepause
  trans     goto_fall_combat_prepause_ready   StateFallCombatAirbornePrepauseReady


:StateFallCombatAirbornePrepauseReady
  animation DW_Dive_Attack_Start  # @NOTE: this is a temporary animation. Have some anim that is just a 1 frame thingo like this in the future though.
  loop      0
  trans     goto_idle                         StateLandIdle
  trans     goto_run                          StateLandRun
  trans     goto_fall                         StateFall
  trans     goto_grabbed                      StateGrabbed
  trans     goto_combat_execute_grounded      StateCombatGroundedAttack
  trans     goto_combat_execute_airborne      StateCombatAirborneAttack


:StateGrabbed
  animation Grabbed
  loop      0
  event     0.0                               EventPlaySFXGrabbed
  trans     leave_grabbed                     StateIdle  # @TODO: this should be able to split into multiple different animations to go to instead of just going to idle animation




#########################
#    Combat Prepause    #
#########################


:StateCombatGroundedPrepause
  animation DW_Charge_Weapon_Initial_Attack
  loop      0
  trans     goto_grabbed                    StateGrabbed
  trans     goto_finish_prepause_grounded   StateIdle
  trans     goto_finish_prepause_airborne   StateFallCombatAirbornePrepauseReady


:StateCombatAirbornePrepause
  animation DW_Dive_Attack_Start
  loop      0
  trans     goto_grabbed                    StateGrabbed
  trans     goto_finish_prepause_grounded   StateIdle
  trans     goto_finish_prepause_airborne   StateFallCombatAirbornePrepauseReady




#########################
#    Grounded Combat    #
#########################


# @TODO: since these are configured with near-non-interruptable animatinos, I think that there's some extent that you can add events. Think about what you wanna do as far as design for this!  -Timo


:StateCombatGroundedAttack
  animation DW_Horizontal_Attack
  loop      0
  on_finish StateCombatGroundedAttackEnd
  event     0.0                          EventPlaySFXAttack
  event     0.4                          EventAllowComboInput
  event     0.666667                     EventAllowComboTransition
  trans     goto_next_combo_attack       StateCombatGroundedAttackCombo2
  trans     goto_grabbed                 StateGrabbed


:StateCombatGroundedAttackEnd
  animation DW_Horizontal_Attack_End
  loop      0
  on_finish StateIdle
  event     0.0                          EventGotoEndAttackStage
  event     1.0                          EventGotoNoneAttackStage
  trans     goto_grabbed                 StateGrabbed
  trans     goto_combat_prepause         StateCombatGroundedPrepause


:StateCombatGroundedAttackCombo2
  animation DW_Horizontal_Combo2_Attack
  loop      0
  on_finish StateCombatGroundedAttackCombo2End
  event     0.230769                          EventPlaySFXAttack
  event     0.4                               EventAllowComboInput
  event     0.692308                          EventAllowComboTransition
  trans     goto_next_combo_attack            StateCombatGroundedAttackCombo3
  trans     goto_grabbed                      StateGrabbed


:StateCombatGroundedAttackCombo2End
  animation DW_Horizontal_Combo2_Attack_End
  loop      0
  on_finish StateIdle
  event     0.0                     EventGotoEndAttackStage
  event     1.0                     EventGotoNoneAttackStage
  trans     goto_grabbed            StateGrabbed
  trans     goto_combat_prepause    StateCombatGroundedPrepause


:StateCombatGroundedAttackCombo3  # PLACEHOLDER: however, idea is to do a slice upwards to lay it down for combo 4  -Timo 2022/11/25
  animation DW_Horizontal_Combo3_Attack
  loop      0
  on_finish StateCombatGroundedAttackCombo3End
  event     0.230769                          EventPlaySFXAttack
  event     0.4                               EventAllowComboInput
  event     0.692308                          EventAllowComboTransition
  trans     goto_next_combo_attack            StateCombatGroundedAttackCombo4
  trans     goto_grabbed                      StateGrabbed


:StateCombatGroundedAttackCombo3End
  animation DW_Horizontal_Combo3_Attack_End
  loop      0
  on_finish StateIdle
  event     0.0                     EventGotoEndAttackStage
  event     1.0                     EventGotoNoneAttackStage
  trans     goto_grabbed            StateGrabbed
  trans     goto_combat_prepause    StateCombatGroundedPrepause


:StateCombatGroundedAttackCombo4   # PLACEHOLDER: however, in the future I want an anim where it's a slice straight down like an ax swing or the spin attack where an aoe is produced and the characters legs are off the ground!  -Timo 2022/11/25
  animation DW_Horizontal_Combo4_Attack
  loop      0
  on_finish StateCombatGroundedAttackCombo4End
  event     0.230769                          EventPlaySFXAttack
  trans     goto_grabbed                      StateGrabbed
  # @NOTE: final combo, so there is no goto_next_combo_attack


:StateCombatGroundedAttackCombo4End
  animation DW_Horizontal_Combo4_Attack_End
  loop      0
  on_finish StateIdle
  event     0.0                     EventGotoEndAttackStage
  event     1.0                     EventGotoNoneAttackStage
  trans     goto_grabbed            StateGrabbed
  trans     goto_combat_prepause    StateCombatGroundedPrepause




#########################
#    Airborne Combat    #
#########################


:StateCombatAirborneAttack
  animation DW_Dive_Attack
  loop      0
  event     0.0                      EventPlaySFXAttack
  trans     goto_dive_attack_end     StateCombatAirborneAttackEnd
  trans     goto_grabbed             StateGrabbed


:StateCombatAirborneAttackEnd
  animation DW_Dive_Attack_End
  loop      0
  on_finish StateIdle
  event     0.0                     EventGotoEndAttackStage
  event     0.0                     EventPlaySFXLandHard
  event     1.0                     EventGotoNoneAttackStage
  trans     goto_grabbed            StateGrabbed
  trans     goto_combat_prepause    StateCombatGroundedPrepause  # NOTE: at the end of the airborne attack, you're grounded




#####################
#    Misc Combat    #
#####################


:StateSpinAttack
  animation DW_Spin_Attack
  loop      0
  on_finish StateFall
  event     1.0                 EventGotoNoneAttackStage
  trans     goto_grabbed        StateGrabbed




#########################
#    Upper Body Mask    #
#########################


# This masks the upper body starting with the Mid Back bone. Everything else should still get controlled normally by whatever layers aren't taking the bones
~MaskCombatMode
  enabled   0
  bone      Shoulder.L  # @NOTE: you need to have some way of doing errors in case if these bones are named incorrectly
  bone      Upper Arm.L
  bone      Forearm.L
  bone      Hand.L
  bone      IndexF1.L
  bone      IndexF2.L
  bone      MiddleF1.L
  bone      MiddleF2.L
  bone      RingF1.L
  bone      RingF2.L
  bone      Pinky1.L
  bone      Pinky2.L
  bone      Thumb1.L
  bone      Thumb2.L
  bone      Shoulder.R
  bone      Upper Arm.R
  bone      Forearm.R
  bone      Hand.R
  bone      IndexF1.R
  bone      IndexF2.R
  bone      MiddleF1.R
  bone      MiddleF2.R
  bone      RingF1.R
  bone      RingF2.R
  bone      Pinky1.R
  bone      Pinky2.R
  bone      Thumb1.R
  bone      Thumb2.R
  bone      Mid Back
  bone      Upper Back
  bone      Neck
  bone      Head
  bone      Back Attachment
  bone      Hand Attachment


:StateMCMIdle  # Default anim for this mask bc it's the first defined
  mask      MaskCombatMode
  animation DW_Idle
  loop      1
  trans     current_state                       StateRun       StateMCMRun
  trans     goto_mcm_grounded_prepause_ready    StateMCMGroundedPrepauseReady


:StateMCMRun
  mask      MaskCombatMode
  animation DW_Run
  loop      1
  trans     not_current_state                   StateRun       StateMCMIdle
  trans     goto_mcm_grounded_prepause_ready    StateMCMGroundedPrepauseReady


:StateMCMGroundedPrepauseReady
  mask      MaskCombatMode
  animation DW_Charge_Weapon_Initial_Attack_Hold
  trans     leave_mcm_grounded_prepause_ready   StateMCMIdle


# @NOTE: current_state and not_current_state are special triggers where they look up what the current state is in a different mask (i.e. the one StateRun is in) and if it is/isn't the state specified (i.e. StateRun), then it will move to a different state on this mask. It's essentially a simple syncing usability.  -Timo
