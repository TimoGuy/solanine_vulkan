d161a965-a97d-47c5-a520-a0e6ead290dc    # Scene UUID (First line) (TODO: figure out if this is actually needed?)


###############################
# First part is for entrances #
###############################
~3                                      # Entrance Count

:0                                      # Entrance id 0
0.0                                     # spawn_x
0.0                                     # spawn_y
0.0                                     # spawn_z
1.235122                                # spawn_facing_direction_radians

:1
69.0
420.0
42069.0
3.141593

:2
100.0
10000.0
100.0
0.0

# NOTE: in the debug mode, these entrances will likely each have a registered renderobject,
#       but in reality they'll just be scene properties with no entities running the show.


##############################
# Second part is for objects #
##############################
~3                                      # Object Count

:trigger
42bd770b-adf9-444b-a5e6-73c78ed9dd10
0.0                                     # (CUSTOM PARAM) position_x
0.0                                     # (CUSTOM PARAM) position_y
0.0                                     # (CUSTOM PARAM) position_z
1.0                                     # (CUSTOM PARAM) extent_x    NOTE: triggers are axis aligned boxes to keep stuff simple, and only trigger when the center of an object collides i.e. the origin point in AABB calculation only
1.0                                     # (CUSTOM PARAM) extent_y
1.0                                     # (CUSTOM PARAM) extent_z
69                                      # (CUSTOM PARAM) what does this trigger do? (Trigger will have multiple cases... case 69 will be in the giant switch statement! NOTE: this avoids creating some kind of scripting language, which will make gamedev easier... hopefully  -Timo)

# NOTE: DO NOT INCLUDE THIS OBJECT TYPE.
#       Player doesn't need to be included bc the player (whatever transformation etc.)
#       will always be present no matter what. There CAN be a debug spawn here thing though! (NOTE: see next object)
#:guy_player_slime
#06d49505-a2bc-4c3b-b256-865dd4c78ef1
#0.0                                     # (CUSTOM PARAM) position_x
#0.0                                     # (CUSTOM PARAM) position_y
#0.0                                     # (CUSTOM PARAM) position_z
#1.235122                                # (CUSTOM PARAM) facing_direction_radians
#1                                       # (CUSTOM PARAM) has_sword_1
#0                                       # (CUSTOM PARAM) has_shield_1
#99                                      # (CUSTOM PARAM) num_arrows

:debug_spawn_player_for_playtesting
06d49505-a2bc-4c3b-b256-865dd4c78ef1    # NOTE: this type of object will be only used for debug playtesting purposes. When hitting F11 for the first time, the player will be spawned at that position, and TAB will reset the player object to that position.  NOTE: if this object isn't included, then the debug respawn position will just be Entrance0, and if Entrance0 doesn't exist, then 0,0,0@0.0
0.0                                     # (CUSTOM PARAM) spawn_position_x
0.0                                     # (CUSTOM PARAM) spawn_position_y
0.0                                     # (CUSTOM PARAM) spawn_position_z
1.235122                                # (CUSTOM PARAM) spawn_facing_direction_radians

:yosemite
c9b04500-decc-430c-8b57-8be312f57049    # NOTE: this means a 3d model (kinda a joke to myself from the last project)
box.gltf                                # File name under "res/models/" (NOTE: you can use relative paths too)
0.0                                     # (CUSTOM PARAM) model_position_x (NOTE: remember that entities themselves have no position factor)
0.0                                     # (CUSTOM PARAM) model_position_y
0.0                                     # (CUSTOM PARAM) model_position_z
0.0                                     # (CUSTOM PARAM) model_rotation_x
0.0                                     # (CUSTOM PARAM) model_rotation_y
0.0                                     # (CUSTOM PARAM) model_rotation_z
0.0                                     # (CUSTOM PARAM) model_rotation_w
100.0                                   # (CUSTOM PARAM) model_scale_x
1.0                                     # (CUSTOM PARAM) model_scale_y
100.0                                   # (CUSTOM PARAM) model_scale_z
2                                       # (CUSTOM PARAM) rigidbody_type (NOTE: this is an enum, so DYNAMIC=0, KINEMATIC=1, STATIC=2) (NOTE: those are mostly for collision data, but STATIC may be used later for baked global illumination)
2                                       # (CUSTOM PARAM) num_primitive_colliders (NOTE: after this, it will be a list)
2                                       #                (PRIM COLLIDER 0) collider_type (ENUM: SPHERE=0, PLANE=1, BOX=2, CYLINDER=3, CAPSULE=4, CONE=5, TRIANGLE_MESH=6)
0.0                                     #                (PRIM COLLIDER 0) offset_x
1.0                                     #                (PRIM COLLIDER 0) offset_y
0.0                                     #                (PRIM COLLIDER 0) offset_z
2.0                                     #                (PRIM COLLIDER 0) extent_x
2.0                                     #                (PRIM COLLIDER 0) extent_y
2.0                                     #                (PRIM COLLIDER 0) extent_z
6                                       #                (PRIM COLLIDER 1) collider_type
cool_mesh.glb                           #                (PRIM COLLIDER 1) triangle_mesh_model  TODO: maybe make a cache system to share shapes or something? But then the offset, rotation, and scale would have to be shared.... so maybe not! OR! Bullet isn't shotty like Nvidia physx so it's okay to share cooked triangle mesh shapes!
0.0                                     #                (PRIM COLLIDER 1) offset_x
0.0                                     #                (PRIM COLLIDER 1) offset_y
0.0                                     #                (PRIM COLLIDER 1) offset_z
0.0                                     #                (PRIM COLLIDER 1) rotation_x
0.0                                     #                (PRIM COLLIDER 1) rotation_y
0.0                                     #                (PRIM COLLIDER 1) rotation_z
0.0                                     #                (PRIM COLLIDER 1) rotation_w
1.0                                     #                (PRIM COLLIDER 1) scale_x
1.0                                     #                (PRIM COLLIDER 1) scale_y
1.0                                     #                (PRIM COLLIDER 1) scale_z


# NOTE: when you copy an object, it's just copying all the information needed onto the clipboard to paste/duplicate
#       the object. It will paste the object at the same position (remember that entities don't have a "position") as where you copied it (regenerating the uuid btw).


# NOTE: there will be no CUT (ctrl-x) keyboard shortcut either.


# TODO: create a nice palette scene, and then it'd be easier to copy and paste stuff into other scenes


# NOTE: I thought of doing some kind of prefab idea where it'd load from a file... but that's too much I think.
#       Remember, this is a game, not a game engine  -Timo 2022/10/23













